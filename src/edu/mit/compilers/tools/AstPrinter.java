package edu.mit.compilers.tools;

import java.io.PrintStream;

import antlr.collections.AST;

/** Prints an AST in DOT format. */
public class AstPrinter {
    private final PrintStream printStream;

    private int id = 0;

    /** Constructs an AstPrinter that outputs to the given PrintStream. */
    public AstPrinter(PrintStream printStream) {
        this.printStream = printStream;
    }

    /** Print the AST in DOT format to this AstPrinter's PrintStream. */
    public void print(AST ast) {
        printStream.println("digraph AST {");
        printNode(ast);
        printStream.println("}");
    }

    /**
     * Print the nodes and edges of the AST rooted at a node.
     *
     * <p>Each node is assigned a unique ID.  The tree is generated by expressing links from node
     * to node, in the form "id1 -> id2;".
     *
     * <p>Each node is also declared with a label, which is 'node.getText()'.
     *
     * @param ast The AST to print.
     * @return The id assigned to this node.  (Callers can use this id to draw an edge to this
     * node.)
     */
    private int printNode(AST ast) {
        int nodeId = id++;
        printStream.println(Dot.node(nodeId, ast.getText()));
        for (AST child = ast.getFirstChild(); child != null; child = child.getNextSibling()) {
            int childId = printNode(child);
            // Draw an edge to the child, now that we have its id.
            printStream.println(Dot.edge(nodeId, childId));
        }
        return nodeId;
    }
}
